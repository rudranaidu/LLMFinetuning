Training a binary classifier model  "distilbert-base-uncased"


from datasets import load_dataset
from transformers import AutoTokenizer, AutoModelForSequenceClassification, TrainingArguments, Trainer, pipeline
import numpy as np
from sklearn.metrics import accuracy_score

import transformers
print(transformers.__version__)
from transformers import TrainingArguments

# 1. Load IMDb dataset
dataset = load_dataset("imdb")

# 2. Load tokenizer
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")

# 3. Preprocessing (tokenization)
def preprocess(examples):
    return tokenizer(examples["text"], truncation=True, padding="max_length")

encoded_dataset = dataset.map(preprocess, batched=True)

# 4. Prepare small training and eval set for CPU
train_dataset = encoded_dataset["train"].shuffle(seed=42).select(range(2000))
eval_dataset = encoded_dataset["test"].shuffle(seed=42).select(range(500))

# 5. Load model
model = AutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased", num_labels=2)

# 6. Define training arguments
training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=2,
    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    eval_strategy="epoch",
    save_strategy="epoch",
    logging_dir="./logs",
    logging_steps=10
)

# 7. Metric computation
def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    return {"accuracy": accuracy_score(labels, predictions)}

# 8. Trainer setup
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    compute_metrics=compute_metrics,
)

# 9. Train the model
trainer.train()

# 10. Save the model
trainer.save_model("./sentiment-model")
